using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System;
using System.Text.RegularExpressions;

#if UNITY_EDITOR
	using UnityEditor;
#endif

// Storage classes for IAS adverts
public class AdJsonFileData {
	public List<AdSlotData> slotInts = new List<AdSlotData>();

	public AdJsonFileData(List<AdSlotData> newSlotIntsData = null)
	{
		slotInts = newSlotIntsData;
	}
}

public class AdSlotData {
	public int slotInt; // Number from the slotID

	public List<AdData> advert = new List<AdData>();

	public int lastSlotId;

	public AdSlotData(int newSlotInt = -1, List<AdData> newAdvert = null, int newLastSlotId = -1)
	{
		slotInt = newSlotInt;
		advert = newAdvert;
		lastSlotId = newLastSlotId;
	}
}

public class AdData {
	public char slotChar; // Character from the slotID

	public bool isTextureReady; // Has the texture finished downloading
	public bool isInstalled; // Is this an advert for an app which is already installed?
	public bool isSelf; // Is this an advert for this game?
	public bool isActive; // Is this an advert marked as active in the json file?

	public long lastUpdated; // Timestamp of when the ad was last updated

	public string adUrl;
	public Texture adTexture;

	public AdData(char inSlotChar = default(char), bool inIsInstalled = false, bool inIsSelf = false, bool inIsActive = false, string inAdUrl = "")
	{
		slotChar = inSlotChar;

		isTextureReady = false;
		isInstalled = inIsInstalled;
		isSelf = inIsSelf;
		isActive = inIsActive;

		adUrl = inAdUrl;
		adTexture = null;
	}
}

// These classes are for the JsonUtility to move the data into after they've been ready from the file
public class JsonFileData {
	public List<JsonSlotData> slots;
	public List<JsonSlotData> containers;
}

public class JsonSlotData {
	public string slotid;

	public long updatetime;
	public bool active;

	public string adurl;
	public string imgurl;
}

public class IAS_Manager : MonoBehaviour
{
	public static IAS_Manager staticRef;

	#if !UNITY_5 || !UNITY_ANDROID
		public string bundleId = "com.example.GameNameHere";
		public string appVersion = "1.00";
	#else
		public string bundleId { get; private set; }
		public string appVersion { get; private set; }
	#endif

	private int internalScriptVersion = 13;

	// JSON URLs where the ads are grabbed from
	#if UNITY_IOS
		public string[] jsonUrls = new string[1]{"http://ias.gamepicklestudios.com/ad/3.json"};
	#elif UNITY_WP_8_1
		public string[] jsonUrls = new string[1]{"http://ias.gamepicklestudios.com/ad/4.json"};
	#else
		public string[] jsonUrls = new string[1]{"http://ias.gamepicklestudios.com/ad/1.json"};
	#endif

	private int slotIdDecimalOffset = 97; // Decimal offset used to start our ASCII character at 'a'

	// List of apps installed on the player device matching our filter
	private List<string> installedApps = new List<string>();
	private List<AdJsonFileData> advertData = new List<AdJsonFileData>();

	public bool useStorageCache = true; // Should ads be downloaded to the device for use across sessions
	public bool logAllInstalledApps = false;
	public bool logAdImpressions = true;

	public static Action OnIASReady;

	#if UNITY_EDITOR
		// When true the script checks for a new version when entering play mode
		public bool checkForLatestVersion = true;
	
		private IEnumerator CheckIASVersion()
		{
			WWW versionCheck = new WWW("http://data.i6.com/IAS/ias_check.txt");

			yield return versionCheck;

			int latestVersion = 0;

			int.TryParse(versionCheck.text, out latestVersion);

			if(latestVersion > internalScriptVersion){
				if(EditorUtility.DisplayDialog("IAS Update Available!", "There's a new version of the IAS script available!\nWould you like to update now?\n\nIAS files will be automatically replaced with their latest versions!", "Yes", "No")){
					string scriptPath = EditorUtility.OpenFilePanel("Select IAS_Manager.cs from your project!", "", "cs");

					if(scriptPath.Length > 0){
						// Remove assets from the path because Unity 5.4.x has a bug where the return value of the path doesn't include assets unlike other versions of unity
						scriptPath = scriptPath.Replace("Assets/", "");

						// Re-add Assets/ but also remove the data path so the path starts at Assets/
						scriptPath = scriptPath.Replace(Application.dataPath.Replace("Assets", ""), "Assets/");

						WWW scriptDownload = new WWW("http://data.i6.com/IAS/GamePickle/IAS_Manager.cs");

						yield return scriptDownload;

						FileStream tmpFile = File.Create(scriptPath + ".tmp");
						FileStream backupFile = File.Create(scriptPath + ".backup" + internalScriptVersion);

						tmpFile.Close();
						backupFile.Close();

						File.WriteAllText(scriptPath + ".tmp", scriptDownload.text);
						File.Replace(scriptPath + ".tmp", scriptPath, scriptPath + ".backup");
						File.Delete(scriptPath + ".tmp");

						// Update the AssetDatabase so we can see the file changes in Unity
						AssetDatabase.Refresh();

						Debug.Log("IAS upgraded from version " + internalScriptVersion + " to " + latestVersion);

						// Force exit play mode
						EditorApplication.isPlaying = false;
					} else {
						Debug.LogError("Update cancelled! Did not select the IAS_Manager.cs script!");
					}
				} else {
					Debug.LogError("Update cancelled! Make sure to update your IAS version before sending a build!");
				}
			}
		}
	#endif

	#if UNITY_ANDROID
		private void UpdateInstalledPackages()
		{
			ProjectManager.AdvLog("IAS Updating Installed Packages");

			installedApps.Clear();

			// Get all installed packages with a bundleId matching our filter
			string filteredPackageList = "";//JarLoader.GetPackageList("com.pickle.");

			// Cleanup the package list mistakes (ending comma or any spaces)
			if(!string.IsNullOrEmpty(filteredPackageList)){
				filteredPackageList = filteredPackageList.Trim(); // Trim whitespaces
				filteredPackageList = filteredPackageList.Remove(filteredPackageList.Length - 1); // Remove the unwanted comma at the end of the list

				// Split the list into a string array
				string[] packageArray = filteredPackageList.Split(",".ToCharArray(), StringSplitOptions.RemoveEmptyEntries);

				if(packageArray.Length > 0){
					// Extract all packages and store them in the installedApps list
					foreach(string packageName in packageArray)
						installedApps.Add(packageName);
				} else {
					Analytics.LogEvent("IAS", "No other installed packages found matching filter!");
				}
			} else {
				Analytics.LogEvent("IAS", "Filtered package list was empty!");
			}

			Analytics.SetUserProperty("Total Pickle Games Installed", installedApps.Count.ToString());
		}
	#endif

	void Awake()
	{
		staticRef = (staticRef == null ? this : staticRef);

		#if UNITY_5 && UNITY_ANDROID
			bundleId = Application.identifier;
			appVersion = Application.version;
		#else
			if(bundleId == "com.example.GameNameHere")
				Analytics.LogError("IAS", "bundleId has not been changed from default! This needs to be set for this game!");
		#endif

		#if UNITY_EDITOR
			if(checkForLatestVersion)
				StartCoroutine(CheckIASVersion());
		#endif

		Analytics.LogEvent("IAS", "Ver: " + internalScriptVersion + ", ID: " + bundleId + ", App Ver: " + appVersion);
	}

	void Start()
	{
		#if UNITY_ANDROID
			// Get a list of installed packages on the device and store ones matching a filter
			UpdateInstalledPackages();
		#endif
	}

	private bool IsPackageInstalled(string packageName)
	{
		foreach(string comparisonApp in installedApps)
			if(packageName.Contains(comparisonApp))
				return true;

		return false;
	}

	private bool DoesSlotFileIdExist(int jsonFileId)
	{
		return ((jsonFileId >= advertData.Count) ? false : true);
	}

	private bool DoesSlotIntExist(int jsonFileId, int wantedSlotInt)
	{
		return ((GetAdSlotData(jsonFileId, wantedSlotInt) == null) ? false : true);
	}

	private bool DoesSlotCharExist(int jsonFileId, int wantedSlotInt, char wantedSlotChar)
	{
		return ((GetAdData(jsonFileId, wantedSlotInt, wantedSlotChar) == null) ? false : true);
	}

	private int GetSlotIndex(int jsonFileId, int wantedSlotInt)
	{
		// Iterate through each slot in the requested json file
		for(int i=0;i < advertData[jsonFileId].slotInts.Count;i++)
		{
			AdSlotData curSlotData = advertData[jsonFileId].slotInts[i];

			// Check if this ad slot int matched the one we requested
			if(curSlotData.slotInt == wantedSlotInt)
				return i;
		}

		return -1;
	}

	private int GetAdIndex(int jsonFileId, int wantedSlotInt, char wantedSlotChar)
	{
		AdSlotData slotData = GetAdSlotData(jsonFileId, wantedSlotInt);

		for(int i=0;i < slotData.advert.Count;i++)
		{
			AdData curAdData = slotData.advert[i];

			if(wantedSlotChar == curAdData.slotChar)
				return i;
		}

		return -1;
	}

	private AdSlotData GetAdSlotData(int jsonFileId, int wantedSlotInt)
	{
		// Iterate through each slot in the requested json file
		foreach(AdSlotData curSlotData in advertData[jsonFileId].slotInts)
		{
			// Check if this ad slot int matches the one we requested
			if(curSlotData.slotInt == wantedSlotInt)
				return curSlotData;
		}

		return null;
	}

	private AdData GetAdData(int jsonFileId, int wantedSlotInt)
	{
		return GetAdData(jsonFileId, wantedSlotInt, GetSlotChar(jsonFileId, wantedSlotInt));
	}

	private AdData GetAdData(int jsonFileId, int wantedSlotInt, char wantedSlotChar)
	{
		foreach(AdData curData in GetAdSlotData(jsonFileId, wantedSlotInt).advert)
		{
			// Check if this ad slot character matches the one we requested
			if(curData.slotChar == wantedSlotChar)
				return curData;
		}

		return null;
	}

	private void IncSlotId(int jsonFileId, int wantedSlotInt)
	{
		AdSlotData wantedSlotData = GetAdSlotData(jsonFileId, wantedSlotInt);

		wantedSlotData.slotInt = wantedSlotData.slotInt + 1 >= wantedSlotData.advert.Count ? 0 : wantedSlotData.slotInt + 1;
	}

	private char GetSlotChar(int jsonFileId, int wantedSlotInt)
	{
		return (char)(GetAdSlotData(jsonFileId, wantedSlotInt).slotInt + slotIdDecimalOffset);
	}



	private IEnumerator DownloadIASData()
	{
		// Wait for an active internet connection
		while(Application.internetReachability == NetworkReachability.NotReachable)
			yield return null;

		ProjectManager.AdvLog("IAS downloading data..");

		// TODO: Don't want to clear cause I wanna cache the data c:
		//advertData.Clear();

		// Iterate through each JSON file
		for(int jsonFileId=0;jsonFileId < jsonUrls.Length;jsonFileId++)
		{
			// Download the JSON file
			WWW wwwJSON = new WWW (jsonUrls[jsonFileId]);

			// Wait for the JSON data to be downloaded
			yield return wwwJSON;

			// Check for any errors
			if(!string.IsNullOrEmpty(wwwJSON.error)){
				Analytics.LogError("IAS", "Download error! " + wwwJSON.error);
				yield break;
			} else if(wwwJSON.text.Contains("There was an error")){
				Analytics.LogError("IAS", "Download error! Serverside system error!");
				yield break;
			} else if(string.IsNullOrEmpty(wwwJSON.text)){
				Analytics.LogError("IAS", "Download error! Empty JSON!");
				yield break;
			}

			JsonFileData tempAdvertData = JsonUtility.FromJson<JsonFileData>(wwwJSON.text);

			// Dispose of the wwwJSON data (clear it from memory)
			wwwJSON.Dispose();

			if(!DoesSlotFileIdExist(jsonFileId))
				advertData.Add(new AdJsonFileData());

			// We're currently only using the slots, not containers
			for(int i=0;i < tempAdvertData.slots.Count;i++)
			{
				JsonSlotData curSlot = tempAdvertData.slots[i];

				// We'll be converting the slot id (e.g 1a, 1c or 2f) into just number and just character values
				int slotInt; char slotChar;

				// Attempt to extract the slot int from the slot id
				if(!int.TryParse(Regex.Replace(curSlot.slotid, "[^0-9]", ""), out slotInt)){
					Analytics.LogError("IAS", "Failed to parse slot int from '" + curSlot.slotid + "'");
					yield break;
				}

				// Attempt to extract the slot character from the slot id
				if(!char.TryParse(Regex.Replace(curSlot.slotid, "[^a-z]", ""), out slotChar)){
					Analytics.LogError("IAS", "Failed to parse slot char from '" + curSlot.slotid + "'");
					yield break;
				}

				// If this slot doesn't exist yet create a new slot for it
				if(!DoesSlotIntExist(jsonFileId, slotInt))
					advertData[jsonFileId].slotInts.Add(new AdSlotData(slotInt, new List<AdData>()));

				// Get the index in the list for slotInt
				int slotDataIndex = GetSlotIndex(jsonFileId, slotInt);



				// Make sure this slot char isn't repeated in the json file within this slot int for some reason
				if(!DoesSlotCharExist(jsonFileId, slotInt, slotChar)){
					advertData[jsonFileId].slotInts[slotDataIndex].advert.Add(new AdData());
				}

				int slotAdIndex = GetAdIndex(jsonFileId, slotInt, slotChar);

				AdData curAdData = advertData[jsonFileId].slotInts[slotDataIndex].advert[slotAdIndex];

				// Extract the bundleId of the advert
				#if UNITY_ANDROID
					// Regex extracts the id GET request from the URL which is the package name of the game
					// (replaces everything that does NOT match id=blahblah END or NOT match id=blahblah AMERPERSAND
					string packageName = Regex.Replace(curSlot.adurl, "^id=([^&]*?)$|^id=([^&]*?)&", "");
				#else
					// For other platforms we should be fine to just use the full URL for package name comparisons as we'll be using .Compare
					// And other platforms won't include any other referral bundle ids in their URLs
					string packageName = curSlot.adurl;
				#endif

				curAdData.isSelf = curSlot.adurl.Contains(bundleId);
				curAdData.isActive = curSlot.active;
				curAdData.isInstalled = IsPackageInstalled(packageName);
				curAdData.adUrl = curSlot.adurl;

				// Only bother re-downloading the image if the timestamp has changed or isn't set yet
				if(curAdData.lastUpdated == 0L || curAdData.lastUpdated < curSlot.updatetime){
					// Check if this is an advert we may be using in this game
					// Note: We still download installed ads because we might need them if there's no ads to display
					if(!curAdData.isSelf && curAdData.isActive){
						WWW wwwImage = new WWW(curAdData.adUrl);

						// Wait for the image data to be downloaded
						yield return wwwImage;

						// Check for any errors
						if(!string.IsNullOrEmpty(wwwImage.error)){
							Analytics.LogError("IAS", "Image download error! " + wwwImage.error);
							yield break;
						} else if(wwwImage.text.Contains("There was an error")){
							Analytics.LogError("IAS", "Image download error! Serverside system error!");
							yield break;
						} else if(string.IsNullOrEmpty(wwwImage.text)){
							Analytics.LogError("IAS", "Image download error! Empty JSON!");
							yield break;
						}

						curAdData.adTexture = wwwImage.texture;

						// Dispose of the wwwImage data (clear it from memory)
						wwwImage.Dispose();

						curAdData.lastUpdated = curSlot.updatetime;
						curAdData.isTextureReady = true;
					}
				}
			}
		}

		OnIASReady();
	}

	/// <summary>
	/// Refreshes the IAS adverts
	/// </summary>
	/// <param name="jsonFileId">JSON file ID</param>
	/// <param name="wantedSlotInt">Slot int</param>
	public static void RefreshBanners(int jsonFileId, int wantedSlotInt)
	{
		staticRef.IncSlotId(jsonFileId, wantedSlotInt);
	}

	/// <summary>
	/// Returns the URL of the current active advert from the requested JSON file and slot int
	/// </summary>
	/// <returns>The advert URL</returns>
	/// <param name="jsonFileId">JSON file ID</param>
	/// <param name="wantedSlotInt">Slot int</param>
	public static string GetAdURL(int jsonFileId, int wantedSlotInt)
	{
		return staticRef.GetAdData(jsonFileId, wantedSlotInt).adUrl;
	}

	/// <summary>
	/// Returns the Texture of the current active advert from the requested JSON file and slot int
	/// </summary>
	/// <returns>The advert texture</returns>
	/// <param name="jsonFileId">JSON file ID</param>
	/// <param name="wantedSlotInt">Slot int</param>
	public static Texture GetAdTexture(int jsonFileId, int wantedSlotInt)
	{
		return staticRef.GetAdData(jsonFileId, wantedSlotInt).adTexture;
	}

}
